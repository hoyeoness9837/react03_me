{"version":3,"sources":["components/Card/Card.js","components/Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["Card","prop","className","style","maxWidth","pet","name","age","breed","Form","data","htmlFor","type","id","onChange","handleInputChange","value","onClick","handleSubmit","App","state","pets","e","setState","target","preventDefault","JSON","parse","stringify","push","this","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uLAceA,EAbF,SAACC,GACZ,OACE,yBAAKC,UAAU,wBAAwBC,MAAO,CAAEC,SAAU,UACxD,yBAAKF,UAAU,eAAf,SAAoCD,EAAKI,IAAIC,MAC7C,yBAAKJ,UAAU,uBACb,wBAAIA,UAAU,cAAd,eACA,uBAAGA,UAAU,aAAb,QAA+BD,EAAKI,IAAIE,KACxC,uBAAGL,UAAU,aAAb,UAAiCD,EAAKI,IAAIG,UCyCnCC,EA/CF,SAACC,GACZ,OACE,8BACE,yBAAKR,UAAU,oBACb,2BAAOS,QAAQ,QAAf,QACA,2BACEC,KAAK,OACLN,KAAK,OACLO,GAAG,OACHC,SAAUJ,EAAKK,kBACfC,MAAON,EAAKJ,QAGhB,yBAAKJ,UAAU,oBACb,2BAAOS,QAAQ,OAAf,OACA,2BACEC,KAAK,OACLN,KAAK,MACLO,GAAG,MACHC,SAAUJ,EAAKK,kBACfC,MAAON,EAAKH,OAGhB,yBAAKL,UAAU,oBACb,2BAAOS,QAAQ,SAAf,SACA,2BACEC,KAAK,OACLN,KAAK,QACLO,GAAG,QACHC,SAAUJ,EAAKK,kBACfC,MAAON,EAAKF,SAGhB,yBAAKN,UAAU,sBACb,4BACEA,UAAU,4BACVU,KAAK,SACLC,GAAG,gBACHI,QAASP,EAAKQ,cAJhB,aCgBOC,E,4MA/CbC,MAAQ,CACNd,KAAM,GACNC,IAAK,GACLC,MAAO,GACPa,KAAM,I,EAGRN,kBAAoB,SAACO,GACnB,EAAKC,SAAL,eACGD,EAAEE,OAAOlB,KAAOgB,EAAEE,OAAOR,S,EAI9BE,aAAe,SAACI,GACdA,EAAEG,iBACF,IAAIJ,EAAOK,KAAKC,MAAMD,KAAKE,UAAU,EAAKR,MAAMC,OAChDA,EAAKQ,KAAK,CACRvB,KAAM,EAAKc,MAAMd,KACjBC,IAAK,EAAKa,MAAMb,IAChBC,MAAO,EAAKY,MAAMZ,QAEpB,EAAKe,SAAS,CACZF,OACAf,KAAM,GACNC,IAAK,GACLC,MAAO,M,uDAKT,OACE,oCACE,kBAAC,EAAD,CACEF,KAAMwB,KAAKV,MAAMd,KACjBC,IAAKuB,KAAKV,MAAMb,IAChBC,MAAOsB,KAAKV,MAAMZ,MAClBO,kBAAmBe,KAAKf,kBACxBG,aAAcY,KAAKZ,eAEpBY,KAAKV,MAAMC,KAAKU,KAAI,SAAC1B,GAAD,OACnB,kBAAC,EAAD,CAAMA,IAAKA,Y,GAzCH2B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cc9f0056.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card = (prop) => {\r\n  return (\r\n    <div className='card border-info mb-3' style={{ maxWidth: '18rem' }}>\r\n      <div className='card-header'>Name: {prop.pet.name}</div>\r\n      <div className='card-body text-info'>\r\n        <h5 className='card-title'>My pet info</h5>\r\n        <p className='card-text'>Age: {prop.pet.age}</p>\r\n        <p className='card-text'>Breed: {prop.pet.breed}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nconst Form = (data) => {\r\n  return (\r\n    <form>\r\n      <div className='input-group mb-3'>\r\n        <label htmlFor='name'>name</label>\r\n        <input\r\n          type='text'\r\n          name='name'\r\n          id='name'\r\n          onChange={data.handleInputChange}\r\n          value={data.name}\r\n        ></input>\r\n      </div>\r\n      <div className='input-group mb-3'>\r\n        <label htmlFor='age'>age</label>\r\n        <input\r\n          type='text'\r\n          name='age'\r\n          id='age'\r\n          onChange={data.handleInputChange}\r\n          value={data.age}\r\n        ></input>\r\n      </div>\r\n      <div className='input-group mb-3'>\r\n        <label htmlFor='breed'>breed</label>\r\n        <input\r\n          type='text'\r\n          name='breed'\r\n          id='breed'\r\n          onChange={data.handleInputChange}\r\n          value={data.breed}\r\n        ></input>\r\n      </div>\r\n      <div className='input-group-append'>\r\n        <button\r\n          className='btn btn-outline-secondary'\r\n          type='button'\r\n          id='button-addon2'\r\n          onClick={data.handleSubmit}\r\n        >\r\n          Submit\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\nimport Card from './components/Card';\nimport Form from './components/Form';\n\nclass App extends Component {\n  state = {\n    name: '',\n    age: '',\n    breed: '',\n    pets: [],\n  };\n\n  handleInputChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    let pets = JSON.parse(JSON.stringify(this.state.pets));\n    pets.push({\n      name: this.state.name,\n      age: this.state.age,\n      breed: this.state.breed,\n    });\n    this.setState({\n      pets,\n      name: '',\n      age: '',\n      breed: '',\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <Form\n          name={this.state.name}\n          age={this.state.age}\n          breed={this.state.breed}\n          handleInputChange={this.handleInputChange}\n          handleSubmit={this.handleSubmit}\n        />\n        {this.state.pets.map((pet) => (\n          <Card pet={pet} />\n        ))}\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}